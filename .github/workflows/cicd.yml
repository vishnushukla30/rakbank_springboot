name: rakbank

on: [push, workflow_dispatch,pull_request]

jobs:
  checkout:
    name: Code checkout
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis....
  SAST: 

    needs: [ checkout ]

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v3

        with:

         token: ${{ secrets.GIT_TOKEN }}
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_KEY }}
        with:
          command: code test

          args: --json-file-output=snyk-report.json
  build:
      needs: [SAST]
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up JDK 18
        uses: actions/setup-java@v2
        with:
          java-version: 18
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build
        run: mvn --batch-mode --update-snapshots --no-transfer-progress clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v2
        with:
          name: app-jar
          path: target/*.jar
      
  Docker_build_ECR_push:
      needs: [build]
      runs-on: ubuntu-latest
      environment: production
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Download JAR file
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: target
      - name: Build Docker image
        run: docker build -t 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot .

      - name: Install and configure AWS CLI
        run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region me-central-1

      - name: Login to ECR
        run: |
            aws ecr get-login-password --region me-central-1 | docker login --username AWS --password-stdin 590733205684.dkr.ecr.me-central-1.amazonaws.com

      - name: Tag and push Docker image
        run: |
            docker tag 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:latest 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:${GITHUB_SHA}
            docker push 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:${GITHUB_SHA}
      
  Deploy_to_EKS:
        needs: [Docker_build_ECR_push]
        runs-on: ubuntu-latest
        environment: production
        steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Install and configure AWS CLI
          run: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region me-central-1
        - name: Deploy to EKS
          run: |
            aws eks update-kubeconfig --region me-central-1 --name rakbank
            mkdir -p k8s
            export ECR_REPOSITORY_URL="590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:${GITHUB_SHA}"
            envsubst < k8s-deployment.yaml > k8s/k8s-deployment.yaml
            echo "resources:" > k8s/kustomization.yaml
            echo "- k8s-deployment.yaml" >> k8s/kustomization.yaml
            kubectl kustomize k8s | kubectl apply -f - --force
